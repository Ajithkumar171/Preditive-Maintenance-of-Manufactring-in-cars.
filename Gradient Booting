# Install joblib
!pip install joblib

# Import necessary libraries
import pandas as pd
from sklearn.model_selection import train_test_split
from sklearn.ensemble import GradientBoostingRegressor
from sklearn.metrics import mean_squared_error, accuracy_score
import joblib

# Load the dataset (replace "your_dataset.csv" with the actual file path)
data = pd.read_csv("dataset.csv")

# Data preprocessing (replace this with your preprocessing steps)
# Print column names to identify the target variable
print("Column names:", data.columns)

# Example: Define X and y based on your dataset
# Replace "pCut::Motor_Torque" with the correct target variable column name
X = data.drop("pCut::Motor_Torque", axis=1)
y = data["pCut::Motor_Torque"]

# Convert the regression problem into a classification problem
y_class = y.round().astype(int)

# Initialize lists to store MSE and accuracy scores
mse_scores = []
accuracy_scores = []

# Perform 10 iterations (adjust as needed)
for i in range(10):
    # Split the data into training and testing sets
    X_train, X_test, y_train, y_test = train_test_split(X, y_class, test_size=0.2, random_state=i)

    # Train a predictive maintenance model (Gradient Boosting Regressor)
    model = GradientBoostingRegressor()
    model.fit(X_train, y_train)

    # Make predictions
    y_pred = model.predict(X_test)

    # Convert predicted values to integer for classification
    y_pred_class = y_pred.round().astype(int)

    # Calculate Mean Squared Error (MSE)
    mse = mean_squared_error(y_test, y_pred)
    mse_scores.append(mse)

    # Calculate accuracy
    accuracy = accuracy_score(y_test, y_pred_class)
    accuracy_scores.append(accuracy)

    # Print MSE and accuracy for each iteration
    print(f"Iteration {i + 1} - MSE: {mse}, Accuracy: {accuracy}")

# Calculate the average MSE and accuracy across 10 iterations
average_mse = sum(mse_scores) / len(mse_scores)
average_accuracy = sum(accuracy_scores) / len(accuracy_scores)

print("\nAverage MSE across 10 iterations:", average_mse)
print("Average Accuracy across 10 iterations:", average_accuracy)

# Save the trained model for real-time use (optional)
joblib.dump(model, "predictive_maintenance_model_gb.pkl")
